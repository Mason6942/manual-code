{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\nmotor_group_1_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_36_1, True)\nmotor_group_1_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_36_1, False)\nmotor_group_1 = MotorGroup(motor_group_1_motor_a, motor_group_1_motor_b)\nmotor_group_3_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nmotor_group_3_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nmotor_group_3 = MotorGroup(motor_group_3_motor_a, motor_group_3_motor_b)\ndistance_11 = Distance(Ports.PORT11)\n\n# New optical sensor\noptical_sensor = Optical(Ports.PORT19)\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n\n# Set random seed \ninitializeRandomSeed()\n\ndef play_vexcode_sound(sound_name):\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\nwait(200, MSEC)\nprint(\"\\033[2J\")\n#endregion\n\n# Motor configuration\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nleft_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nleft_drive = MotorGroup(left_motor_a, left_motor_b)\n\nright_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nright_drive = MotorGroup(right_motor_a, right_motor_b)\n\n# Distance sensor on port 11\ndistance_sensor = Distance(Ports.PORT11)\n\n# Optical sensor on port 19\noptical_sensor = Optical(Ports.PORT19)\noptical_sensor.set_light_power(100)\noptical_sensor.set_light(True)  # Turn on LED for color detection\n\nwait(300, MSEC)\nprint(\"\\033[2J\")\n\ndef turn_around():\n    left_drive.spin(FORWARD, 50, PERCENT)\n    right_drive.spin(REVERSE, 50, PERCENT)\n    wait(1.5, SECONDS)\n    left_drive.stop()\n    right_drive.stop()\n    brain.screen.set_cursor(5, 1)\n    brain.screen.print(\"Green detected! Turning around...\")\n\ndef when_started():\n    while True:\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1, 1)\n        brain.screen.print(\"Scanning...\")\n\n        # Spin in place\n        left_drive.spin(FORWARD, 20, PERCENT)\n        right_drive.spin(FORWARD, 20, PERCENT)\n        wait(1, SECONDS)\n\n        # Stop spinning to check sensors\n        left_drive.stop()\n        right_drive.stop()\n        wait(0.1, SECONDS)\n\n        # Check for Blue\n        hue = optical_sensor.hue()\n        if 100 <= hue <= 160:\n            turn_around()\n            continue\n\n        # Check distance\n        distance_mm = distance_sensor.object_distance(DistanceUnits.MM)\n        brain.screen.set_cursor(2, 1)\n        brain.screen.print(\"Distance: \" + str(distance_mm))\n\n        # Display detected color based on hue\n        brain.screen.set_cursor(6, 1)\n        if 200 <= hue <= 250:\n            brain.screen.print(\"Color: Blue\")\n        elif 100 <= hue <= 160:\n            brain.screen.print(\"Color: Green\")\n        elif 0 <= hue <= 30 or hue >= 330:\n            brain.screen.print(\"Color: Red\")\n        else:\n            brain.screen.print(\"Color: Unknown\")\n\n        if 0 < distance_mm < 400:\n            brain.screen.set_cursor(3, 1)\n            brain.screen.print(\"Target detected!\")\n\n            # Charge\n            left_drive.spin(REVERSE, 70, PERCENT)\n            right_drive.spin(FORWARD, 70, PERCENT)\n            for _ in range(25):  # 2.5 seconds with check every 0.1s\n                if 100 <= optical_sensor.hue() <= 160:\n                    left_drive.stop()\n                    right_drive.stop()\n                    turn_around()\n                    break\n                wait(0.1, SECONDS)\n\n            # Small reverse\n            left_drive.spin(FORWARD, 50, PERCENT)\n            right_drive.spin(REVERSE, 50, PERCENT)\n            wait(1, SECONDS)\n\n            # Final charge\n            left_drive.spin(REVERSE, 100, PERCENT)\n            right_drive.spin(FORWARD, 100, PERCENT)\n            for _ in range(25):  # 2.5 seconds\n                if 100 <= optical_sensor.hue() <= 160:\n                    left_drive.stop()\n                    right_drive.stop()\n                    turn_around()\n                    break\n                wait(0.1, SECONDS)\n\n            # Stop all\n            left_drive.stop(BRAKE)\n            right_drive.stop(BRAKE)\n            brain.screen.set_cursor(4, 1)\n            brain.screen.print(\"Attack complete.\")\n            wait(1, SECONDS)\n        else:\n            brain.screen.set_cursor(3, 1)\n            brain.screen.print(\"No target. Keep scanning.\")\n\n        wait(0.3, SECONDS)\n\n# Start the program\nwhen_started()\n","textLanguage":"python","robotConfig":[{"port":[1,4,2,3,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[11],"name":"distance_11","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[19],"name":"optical_19","customName":false,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}